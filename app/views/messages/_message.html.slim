- highlight_message ||= false

.row class="#{highlight_message ? 'bg-warning bg-opacity-25' : ''} p-md-2 g-0"
  a id="message_#{message.id}"
  .col-sm-12.col-md-auto
    .icon-column
      - if message.flagged?
        - if message.resolved?
          span = 'âœ”'
        - else
          span = 'ğŸš©'
    span.mx-1.mx-md-2
      = link_to messages_path(q: { server_name_eq: message.server.name }) do
        = server_tag(message.server)
    span.text-muted.flex-grow-1.mx-1.mx-md-2 =< time_tag message.sent_at, format: :short
    span.font-monospace.text-muted.font-smaller.d-none.d-md-inline =< message.player_steamid64 if policy(Message).full?
    - if policy(Message).full?
      = link_to messages_path(q: { for_player: message.player_steamid64 }), class: 'text-decoration-none' do
        span.mx-md-2 =< team_color message.player_team, message.player_name
    - else
      span.mx-md-2 =< team_color message.player_team, message.player_name
    span.mx-1.fw-bold.text-muted.font-smaller =< "(TEAM)" if message.team?
  .col-sm-12.col-md
    .d-flex
      div.flex-grow-1.ms-2.p-2.ms-md-0.p-md-0
        = message.message
      div
        .dropdown
          button.btn.btn-outline-secondary.btn-sm.dropdown-toggle data-bs-toggle="dropdown"
            | Tools
          ul.dropdown-menu
            = link_to 'Resolve report', resolve_flag_path(message.flag), class: 'dropdown-item' if message.unresolved? && policy(message.flag).resolve?
            = link_to 'Message context', message_path(message, anchor: "message_#{message.id}"), class: 'dropdown-item'
            = link_to 'Messages by player', messages_path(q: { for_player: message.player_steamid64 }), class: 'dropdown-item' if policy(Message).full?
            = link_to 'Player IPs', connection_events_path(q: { for_player: message.player_steamid3 }), class: 'dropdown-item' if policy(ConnectionEvent).index?
            = link_to 'Steam Profile', steam_url(message.player_steamid64), class: 'dropdown-item' if policy(Message).full?
